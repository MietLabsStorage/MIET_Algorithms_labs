#pragma once
#include <iostream>
#include <vector>

using namespace std;

struct logical
{
	//status
	char status;
	char value;
	char move;
};

int convert(char c);

class TuringMachine
{
	//outside mem (tape)
	char B[15];
	//current status
	char Q;
	//head
	int G;
	//logical Z[11][12];
	vector<vector<logical>> Z;

public:
	TuringMachine(char num)
	{
		for (int i = 0; i < 15; i++)
		{
			B[i] = 'r';
		}
		B[3] = num;
		G = 3;
		Q = '0';
		Z =
		{
			{{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'-','-','R'},{'1','*','H'},{'-','-','-'}},
			{{'k','-','H'},{'2','-','R'},{'3','-','R'},{'4','-','R'},{'5','-','R'},{'6','-','R'},{'7','-','R'},{'8','-','R'},{'9','-','R'},{'a','-','R'},{'-','-','-'},{'-','-','L'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'k','1','H'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'2','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'3','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'4','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'5','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'6','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'7','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'8','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'9','1','R'},{'-','-','R'}},
			{{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'-','-','-'},{'k','1','R'},{'-','-','R'}}
		};
	}

	void run();
	void show();
	void showTable();
};

