#include <iostream>
#include <string>
#include "MyStack.h"

double recursion(int n)
{
	if (n == 0)
	{
		return 1 / 1;
	}
	else
	{
		return recursion(n - 1) * 2 / n;
	}
}

void main()
{
	/*3. Разработать программу анализа арифметического выражения
	(рис.8).
		Программа должна :
	а)  напечатать приглашение для ввода строки; прочитать с клавиатуры строку, введенную пользователем;
	б)	с помощью стека проанализировать правильность расстановки круглых скобок : если в строке встретилась открывающая скобка,
		то записать ее в стек; если встретилась закрывающая скобка, то извлечь один
		символ из стека; операции записи и извлечения символа из стека реализовать 
		в виде двух функций : PUSH и POP.Функция PUSH принимает
		символ и возвращает код возврата(0 - норма, 1 - переполнение стека),
		функция POP возвращает символ с вершины стека и код возврата(0норма, 1 - стек пуст);
	в)	напечатать сообщение о правильности или ошибочности вве -
		денной строки;
	г)	повторять действия, описанные в пп.а) - в), до тех пор, пока
		пользователь не введет пробел.*/
	while (true)
	{
		MyStack stack = MyStack(5);
		int err = 0;
		std::string str;
		std::cout << "Write your string (write \"_\" for exit):: ";
		std::cin >> str;
		if (str == "_")
		{
			break;
		}
		else
		{
			for (int i = 0; i < str.length(); i++)
			{
				if (str[i] == '(')
				{
					stack.Push(str[i], err);
					if (err == 1)
					{
						std::cout << "stack was overflow" << std::endl;
						break;
					}
				}
				else if (str[i] == ')')
				{
					stack.Pop(err);
					if (err == 1)
					{
						std::cout << "stack was empty" << std::endl;
						break;
					}
				}
			}
			if (stack.isEmpty() && err == 0)
			{
				std::cout << "String written right" << std::endl << std::endl;
			}
			else
			{
				std::cout << "String written wrong" << std::endl << std::endl;
			}
		}
	}



	/*4. Написать программу для вычисления выражения an по формуле
		варианта, соответствующего номеру ЭВМ (варианты заданий). 
		Вычисления организовать в виде рекурсивной функции. 
		Программу выполнить по шагам, записать в конспекте 
		последовательное изменение стека*/

	//An = (2^n)/(n!)
	//рекурсивное представление: An = A_n-1_ * 2/n
	for (int i = 0; i < 10; i++)
	{
		std::cout << recursion(i) << std::endl;
	}

	/*6. Составить программу для формирования элементов массива.*/
	double* arr;
	arr = new double[10];
	for (int i = 0; i < 10; i++)
	{
		arr[i] = recursion(i);
	}
	for (int i = 0; i < 10; i++)
	{
		std::cout << arr[i] << " ";
	}



}